
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module simpleRISC(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	wire clk,reset,run,done;
	wire [31:0] pc,aluResult;

//=======================================================
//  Structural coding
//=======================================================
	assign reset = SW[0];
	assign clk = KEY[1];
	assign run = SW[9];
	assign LEDR[9] = run;
	assign LEDR[0] = done;
	
	hexto7segment hex0_instance(.x(pc[3:0]),.z(HEX0));
	hexto7segment hex1_instance(.x(pc[7:4]),.z(HEX1));
	hexto7segment hex2_instance(.x(aluResult[3:0]),.z(HEX2));
	hexto7segment hex3_instance(.x(aluResult[7:4]),.z(HEX3));
	hexto7segment hex4_instance(.x(aluResult[11:8]),.z(HEX4));
	hexto7segment hex5_instance(.x(aluResult[15:12]),.z(HEX5));
	
	//assign test = 4'b1110;
	//assign HEX5 = test_op; //8'b00000000;
	
	processor(.clk(clk),.reset(reset),.run(run),.pc(pc),.aluResult(aluResult),.done(done));

endmodule

module hexto7segment(
    input  [3:0]x,
    output reg [7:0]z
    );
	always @ (*) begin
		case (x)
			4'b0000 : z = 8'b11000000; //0//z = 8'b01111111;
			4'b0001 : z = 8'b11111001; //1//z = 8'b00000110;
			4'b0010 : z = 8'b10100100; //2//z = 8'b01011011; 
			4'b0011 : z = 8'b10110000; //3//z = 8'b01001111;
			4'b0100 : z = 8'b10011001; //4//z = 8'b01100110;
			4'b0101 : z = 8'b10010010; //5//z = 8'b01101101;  
			4'b0110 : z = 8'b10000010; //6//z = 8'b01111101;
			4'b0111 : z = 8'b11111000; //7//z = 8'b00000111;
			4'b1000 : z = 8'b10000000; //8//z = 8'b01111111;
			4'b1001 : z = 8'b10011000; //9//z = 8'b01101111;
			4'b1010 : z = 8'b10001000; //A//z = 8'b01110111; 
			4'b1011 : z = 8'b00000000; //B//z = 8'b11111111;
			4'b1100 : z = 8'b11000110; //C//z = 8'b01111001;
			4'b1101 : z = 8'b11000000; //D//z = 8'b00111111;
			4'b1110 : z = 8'b10000110; //E//z = 8'b01111001;
			4'b1111 : z = 8'b10001110; //F//z = 8'b01110001;
		endcase
	end
endmodule
